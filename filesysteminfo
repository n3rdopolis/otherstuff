#! /bin/bash

# TODO better detectionr, right now, it tests using the path in a namespace
function checkcanoverlay
{
  #Use a user namespace, only if the user isn't the root user
  if [[ $UID == 0 ]]
  then
    unshare -m mount -t overlay overlay -o lowerdir="$1:$1"  /tmp/ &>/dev/null
  else
    unshare -rm mount -t overlay overlay -o lowerdir="$1:$1"  /tmp/ &>/dev/null
  fi
  overlaytestresult=$?
  if [[ $overlaytestresult == 0 ]]
  then
    return 0
  else
    return 1
  fi
}

function getmountmap
{
  #Get if root is a mountpont
  mountpoint / -q
  ROOTISMOUNTPOINT=$?

  #Handle choots
  if [[ $ROOTISMOUNTPOINT != 0 ]]
  then
    >&2 echo "/ is not a mountpoint. Is / a chroot? Try to bindmount the chroot path onto itself"
    return 1
  fi
  INITROOTFS=$(findmnt -vUrno FSROOT -N1 /)
  THISROOTFS=$(findmnt -vUrno FSROOT /)
  if [[ "$INITROOTFS" != "$THISROOTFS" ]]
  then
    CHROOTPATH="$THISROOTFS"
  else
    CHROOTPATH=/
  fi
  FSES=$(findmnt -vUPno MAJ:MIN,FSROOT,TARGET,ID  | sed -e "s|$CHROOTPATH|/|g" -e "s|//|/|g" -e "s|^MAJ:MIN=|MAJ_MIN=|g" | sort -k4,4n --stable)

  IFS=,
  EXCLUDES+=($IEXCLUDE)
  EXCLUDES+=($EXCLUDE)
  unset IFS
  EXCLUDECOUNT=${#EXCLUDES[@]}

  if [[ $EXCLUDECOUNT == 0 ]]
  then
    EXCLUDES=(/proc /sys /dev /run /tmp)
  fi

  MOUNT_MAP_OUTPUT=""

  FILE_IS_BIND_MOUNTED=0
  UNSUPPORTED_LOWERDIR_FS=0


  unset DONE1FSES
  IFS=$'\n'
  for SEARCH1FS in $FSES
  do
    HASBINDS=0
    unset IFS
    declare $SEARCH1FS
    SEARCH1ID="${ID:1:-1}"
    SEARCH1FSROOT="${FSROOT:1:-1}"
    SEARCH1TARGET="${TARGET:1:-1}"
    SEARCH1MAJMIN="${MAJ_MIN:1:-1}"
    FS1WASHANDLED=0
    IFS=$'\n'
    for DONE1FS in $DONE1FSES
    do
      if [[ "$DONE1FS" == "${SEARCH1MAJMIN}:${SEARCH1FSROOT}" ]]
      then
        FS1WASHANDLED=1
        break
      fi
    done

    if [[ ("$FS1WASHANDLED" == 0) ]]
    then
    REALPATHMAJMIN=$(findmnt -vUrno MAJ:MIN,FSROOT "$SEARCH1TARGET$SEARCH1FSROOT")
    DONE1FSES+="${SEARCH1MAJMIN}:${SEARCH1FSROOT}"$'\n'
    IFS=$'\n'
    for SEARCH2FS in $FSES
    do
      TARGETEXCLUDED=0
      unset IFS
      declare $SEARCH2FS
      SEARCH2ID="${ID:1:-1}"
      SEARCH2FSROOT="${FSROOT:1:-1}"
      SEARCH2TARGET="${TARGET:1:-1}"
      SEARCH2MAJMIN="${MAJ_MIN:1:-1}"
      FS2WASHANDLED=0
      for DONE2FS in $DONE2FSES
      do
        if [[ $DONE2FS == $SEARCH2ID ]]
        then
          FS2WASHANDLED=1
          break
        fi
      done

      for EXCLUDE in ${EXCLUDES[@]}
      do
        EXCLUDEREGEX="^$EXCLUDE(/|)"
        if [[ "$SEARCH2TARGET" =~ $EXCLUDEREGEX ]]
        then
          TARGETEXCLUDED=1
          break
        fi
      done


      if [[ ("$SEARCH1MAJMIN" == "$SEARCH2MAJMIN") && ("$SEARCH1TARGET" != "$SEARCH2TARGET" ) && ("$FS2WASHANDLED" == 0 ) && ($REALPATHMAJMIN == "$SEARCH1MAJMIN $SEARCH1FSROOT") ]]
      then
        #Dont add extra leading slashes. Most paths dont end in /, except for root paths,
        if [[ "$SEARCH1TARGET" == "/" ]]
        then
          SEARCH1TARGET=""
        fi
        DONE2FSES+="$SEARCH2ID"$'\n'
        DONE1FSES+="${SEARCH2MAJMIN}:${SEARCH2FSROOT}"$'\n'
        if [[ -f "$SEARCH2TARGET" ]]
        then
          >&2 echo "$SEARCH2TARGET is a bind mounted file"
          FILE_IS_BIND_MOUNTED=1
        fi
        MOUNT_MAP_OUTPUT+="MOUNTSOURCE=\"$SEARCH1TARGET$SEARCH2FSROOT\" MOUNTDEST=\"$SEARCH2TARGET\" ISBIND=\"1\" DOOVERLAY=\"0\""$'\n'
      fi

      if [[ ($FS2WASHANDLED == 0) && ("$SEARCH1TARGET" == "$SEARCH2TARGET" ) ]]
      then
        if [[ $TARGETEXCLUDED == 0 ]]
        then
          #Detect if the filesystem can support overlayfs
          checkcanoverlay "$SEARCH2TARGET"
          filesystemcanoverlay=$?
          if [[ $filesystemcanoverlay != 0 ]]
          then
            >&2 echo "$SEARCH2TARGET is not supported by overlayfs"
            UNSUPPORTED_LOWERDIR_FS=1
          fi
          MOUNT_MAP_OUTPUT+="MOUNTSOURCE=\"\" MOUNTDEST=\"$SEARCH2TARGET\" ISBIND=\"0\" DOOVERLAY=\"1\""$'\n'
        else
          MOUNT_MAP_OUTPUT+="MOUNTSOURCE=\"\" MOUNTDEST=\"$SEARCH2TARGET\" ISBIND=\"0\" DOOVERLAY=\"0\""$'\n'
        fi
      fi

    done

    fi
  done

  if [[ $UNSUPPORTED_LOWERDIR_FS == 1 || $FILE_IS_BIND_MOUNTED == 1 ]]
  then
    return 1
  else
    echo "$MOUNT_MAP_OUTPUT" | sort -k3,3 -k2,2 -k4,4
  fi
}



ALLFSES=$(getmountmap)


echo "$ALLFSES"
