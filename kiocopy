#! /bin/bash

#Allow Exclamation points to be used in commands by turning off the history
set +H
DoDryRun=0

#Argument is a seed file
#Seed File format. Two colunms. one is the size, one is the path
#if the size is d, then the item is a directory, rows have unix newlines, columns are separated by $'\r'
#For best handling in the array since spaces and tabs are used in test filenames
#Except the first row is the datestamp
SeedFile="$1"
if [[ (! -z $SeedFile) && (! -e "$SeedFile") ]]
then
  echo "$SeedFile does not exist"
  exit
fi

if [[ -z $SeedFile ]]
then
  DateStamp=$(date +%s)
else
  DateStamp=$(head -1 $SeedFile)
fi


FS_SIZE=50G
MAX_FILE_LENGTH=10
FILE_LENGTH_IF_ZERO=20
MAX_FILES_WITH_NONLETTERS=1024
MAX_FOLDERS_WITH_NONLETTERS=1024

MAX_FOLDER_COUNT=100000
MAX_FILE_COUNT=1000000


#Count Number of files and folders made
FolderCount=0
FileCount=0


echo "Warning: This tries to create GB worth of files in /tmp."
echo "This is meant to try to assist with possibly replicating https://bugs.kde.org/show_bug.cgi?id=162211"
echo "Warning: This script when running without a seed file, generates many \$RANDOM numbers, which might use up entropy"
echo "You can specify a seed file as an argument to build a previously created copy source tree"
echo "It requires sudo access to mount and unmount the test loopback file systems it creates"
echo "This script runs kioclient as a user, but will prompt for sudo access to do things like mount and unmount the loopback filesystems."
echo ""
echo "Press Enter..."
read a

echo "Workdir is /tmp/kiocopy/$DateStamp/"

mkdir /tmp/kiocopy
mkdir /tmp/kiocopy/$DateStamp
if [[ -z $SeedFile ]]
then
  echo $DateStamp > /tmp/kiocopy/$DateStamp/Seed.txt
fi

mkdir /tmp/kiocopy/$DateStamp/folder_src
mkdir /tmp/kiocopy/$DateStamp/folder_dest
mkdir /tmp/kiocopy/$DateStamp/logs
rm /tmp/kiocopy/$DateStamp/logs/self.log

#Unmount old paths, if mounted
mountpoint /tmp/kiocopy/$DateStamp/folder_src
if [[ $? == 0 ]]
then
  sudo umount /tmp/kiocopy/$DateStamp/folder_src
fi
mountpoint /tmp/kiocopy/$DateStamp/folder_dest
if [[ $? == 0 ]]
then
  sudo umount /tmp/kiocopy/$DateStamp/folder_dest
fi

#Remove old test fses if they exist
if [[ -e /tmp/kiocopy/$DateStamp/fsimg_src ]]
then
  rm /tmp/kiocopy/$DateStamp/fsimg_src
fi
if [[ -e /tmp/kiocopy/$DateStamp/fsimg_dest ]]
then
  rm /tmp/kiocopy/$DateStamp/fsimg_dest
fi


truncate --size $FS_SIZE /tmp/kiocopy/$DateStamp/fsimg_src
truncate --size $FS_SIZE /tmp/kiocopy/$DateStamp/fsimg_dest
mkfs.ext4  /tmp/kiocopy/$DateStamp/fsimg_src
mkfs.btrfs /tmp/kiocopy/$DateStamp/fsimg_dest

sudo mount -o loop  /tmp/kiocopy/$DateStamp/fsimg_src /tmp/kiocopy/$DateStamp/folder_src
if [[ $? != 0 ]]
then
  echo "EXT4 FS failed to mount"
  exit
fi
sudo mount -o loop  /tmp/kiocopy/$DateStamp/fsimg_dest /tmp/kiocopy/$DateStamp/folder_dest
if [[ $? != 0 ]]
then
  echo "BTRFS FS failed to mount"
  exit
fi

sudo chown $UID /tmp/kiocopy/$DateStamp/folder_src
sudo chown $UID /tmp/kiocopy/$DateStamp/folder_dest

mkdir /tmp/kiocopy/$DateStamp/folder_src/testdir




#Generate random char of type
#0=lowercase
#1=uppercase
#2=number
#4=silly chars that break scripts and parsing
#5=Odd ascii/unicode points
function CreateRandomChar {
  CharType=$1
  LowercaseChars=(a b c d e f g h i j k l m n o p q r s t u v w x y z)
  UppercaseChars=(A B C D E F G H I J K L M N O P Q R S T U V W X W Z)
  NumberChars=(0 1 2 3 4 5 6 7 8 9)
  WhitespaceChars=(" ")
  SillyChars=("\\" "\"" ";" ":" "&" "#" "*" "@" "~" "{" "}" "(" ")" "'" "?" "<" ">" " " $'\t' "." "," "-")
  OddChars=("¬©" "¬æ" "üìã" "üêß" "‰âé" "ñ°í" "‘ë" "ƒ≥" "¬Æ" "‚ïö" "√¢" "√§" "√†" "√•" "√ß" "√™" "√´" "√®" "√Ø" "√Æ" "√¨" "√¶" "√Ñ" "√Ö" "√Ñ" "√â" "√Ü")
  if [[ $CharType == 0 ]]
  then
    MaxElement=${#LowercaseChars[@]}
    ChooseElement=$(( $RANDOM % $MaxElement ))
    ChooseChar=${LowercaseChars[$ChooseElement]}
  elif [[ $CharType == 1 ]]
  then
    MaxElement=${#UppercaseChars[@]}
    ChooseElement=$(( $RANDOM % $MaxElement ))
    ChooseChar=${UppercaseChars[$ChooseElement]}
  elif [[ $CharType == 2 ]]
  then
    MaxElement=${#NumberChars[@]}
    ChooseElement=$(( $RANDOM % $MaxElement ))
    ChooseChar=${NumberChars[$ChooseElement]}
  elif [[ $CharType == 3 ]]
  then
    MaxElement=${#SillyChars[@]}
    ChooseElement=$(( $RANDOM % $MaxElement ))
    ChooseChar=${SillyChars[$ChooseElement]}
  elif [[ $CharType == 4 ]]
  then
    MaxElement=${#OddChars[@]}
    ChooseElement=$(( $RANDOM % $MaxElement ))
    ChooseChar=${OddChars[$ChooseElement]}
  fi

  if [[ ! -z $2 ]]
  then
    printf -v "$2" '%s' "$ChooseChar"
  else
    echo "$ChooseChar"
  fi
}



#First argument if if should be a file name or folder name
#Second is argument with the name
function CreateObjectName {
  IsFile=$1
  if [[ $IsFile != 0 && $IsFile != 1 ]]
  then
    IsFile=0
  fi

  RandomSeed=$RANDOM
  LengthHint=$(($RANDOM % $MAX_FILE_LENGTH))
  if [[ $LengthHint -eq 0 ]]
  then
    Length=$FILE_LENGTH_IF_ZERO
  else
    Length=$LengthHint
  fi

  NewName=""
  for (( CharItr=0 ; CharItr < $Length ; CharItr++ ))
  do
    #Dont flood with too many unreadable symbols, will make reading logs hard for devs, max it out
    if [[ $IsFile == 1 ]]
    then
      if [[ $FileCount -le $MAX_FILES_WITH_NONLETTERS ]]
      then
        NameCharType=$(($RANDOM % 5))
      else
        NameCharType=$(($RANDOM % 3))
      fi
    else
      if [[ $FolderCount -le $MAX_FOLDERS_WITH_NONLETTERS ]]
      then
        NameCharType=$(($RANDOM % 5))
      else
        NameCharType=$(($RANDOM % 3))
      fi
    fi
    CreateRandomChar $NameCharType NameChar
    NewName+=$NameChar
  done
  
  AddExt=$(( $RANDOM % 5 ))
  if [[ $AddExt == 1 ]]
  then
    ExtChar1Type=$(($RANDOM % 3))
    ExtChar2Type=$(($RANDOM % 3))
    ExtChar3Type=$(($RANDOM % 3))
    CreateRandomChar $ExtChar1Type ExtChar1
    CreateRandomChar $ExtChar2Type ExtChar2
    CreateRandomChar $ExtChar3Type ExtChar3
    NewName+="."
    NewName+=$ExtChar1
    NewName+=$ExtChar2
    NewName+=$ExtChar3
  fi

  if [[ ! -z $2 ]]
  then
    printf -v "$2" '%s' "$NewName"
  else
    echo "$NewName"
  fi
}

#This creates Folders, it randomly selects the index of a folder, grabs the name, creates a random folder name
#and creates the folder name, saving the full path to the array. this array of folders is used to create more folders
#since the full path is in the array, and the name gets added.
FolderList=()
FolderList+=("/tmp/kiocopy/$DateStamp/folder_src/testdir/")
function CreateSeededFolder {
  FolderCount=${#FolderList[@]}
  DestFolderID=$(( $RANDOM*$RANDOM % $FolderCount ))
  DestFolderName=${FolderList[$DestFolderID]}
  if [[ ($FolderCount -gt 1000) && ($FolderCount -le 2000) ]]
  then
    NewFolderName=SameFolderName
  else
    CreateObjectName 0 NewFolderName
  fi
  IsPathDuplicated=0

  LastDestFolderName=${DestFolderName:$((${#DestFolderName} -1 )):1}
  if [[ $LastDestFolderName == "/" ]]
  then
    NewPath="$DestFolderName$NewFolderName"
  else
    NewPath="$DestFolderName/$NewFolderName"
  fi
  for SeededFolder in "${FolderList[@]}"
  do
    if [[ "$SeededFolder" == "$NewPath" ]]
    then
      IsPathDuplicated=1
      NewPath="$NewPath$FolderCount"
      NewFolderName="$NewFolderName$FolderCount"
      break
    fi
  done
  FolderList+=("$NewPath")
  ((FolderCount++))

  echo "d"$'\r'"$NewPath" >> /tmp/kiocopy/$DateStamp/Seed.txt
  echo "create dir in index $DestFolderID path $DestFolderName name $NewFolderName (with $FolderCount folders) Duplicate Prevent: $IsPathDuplicated" >> /tmp/kiocopy/$DateStamp/dbglog.txt
}


#This creates files, it randomly selects the index of a folder, grabs the name, creates a random file name
#and creates the file, saving the full path to an array
FileList=()
function CreateSeededFile {
  FolderCount=${#FolderList[@]}
  DestFolderID=$(( $RANDOM*$RANDOM % $FolderCount ))
  DestFolderName=${FolderList[$DestFolderID]}
  if [[ ($FileCount -gt 1000) && ($FileCount -le 2000) ]]
  then
    NewFileName=SameFileName
  else
    CreateObjectName 1 NewFileName
  fi
  IsPathDuplicated=0

  LastDestFolderName=${DestFolderName:$((${#DestFolderName} -1 )):1}
  if [[ $LastDestFolderName == "/" ]]
  then
    NewPath="$DestFolderName$NewFileName"
  else
    NewPath="$DestFolderName/$NewFileName"
  fi
  for SeededFile in "${FileList[@]}"
  do
    if [[ "$SeededFile" == "$NewPath" ]]
    then
      IsPathDuplicated=1
      NewPath="$NewPath$FileCount"
      NewFileName="$NewFileName$FileCount"
      break
    fi
  done
  FileList+=("$NewPath")
  

  #Determine what the size of the file should be
  if [[ $FileCount -le 3 ]]
  then
    NewSize=1073741824
  elif [[ ($FileCount -gt 3) && ($FileCount -le 13) ]]
  then
    NewSize=104857600
  elif [[ ($FileCount -gt 13) && ($FileCount -le 10013) ]]
  then
    NewSize=0
  elif [[ ($FileCount -gt 10013) && ($FileCount -le 10113) ]]
  then
    NewSize=1048576
  else
    NewSize=1024
  fi
  ((FileCount++))

  echo "$NewSize"$'\r'"$NewPath" >> /tmp/kiocopy/$DateStamp/Seed.txt
  #echo "create $NewSize byte file in index $DestFolderID path $DestFolderName name $NewFileName (with $FolderCount folders, $FileCount files.) Duplicate Prevent: $IsPathDuplicated" >> /tmp/kiocopy/$DateStamp/dbglog.txt
}




if [[ -z $SeedFile ]]
then
  #Create the Folder Tree
  echo "Creating folder seeds..."
  for (( FolderItr=0 ; FolderItr < $MAX_FOLDER_COUNT ; FolderItr++ ))
  do
    CreateSeededFolder
  done

  #Create the files
  echo "Creating file seeds..."
  for (( FileItr=0 ; FileItr < $MAX_FILE_COUNT ; FileItr++ ))
  do
    CreateSeededFile
  done
  SeedFile=/tmp/kiocopy/$DateStamp/Seed.txt
fi


echo "Creating objects in filesystem..."
while read SeededItem
do
  IFS=$'\r'
  SeedItemArray=($SeededItem)
  unset IFS

  ItemSize=${SeedItemArray[0]}
  ItemPath=${SeedItemArray[1]}
  if [[ $ItemSize == d ]]
  then
    if [[ $DoDryRun == 1 ]]
    then
      echo "Would have created folder $ItemPath"
    else
      mkdir -p "$ItemPath"
      if [[ $? != 0 ]]
      then
        echo "Failed to create folder $ItemPath" >> /tmp/kiocopy/$DateStamp/logs/self.log
      fi
    fi
  elif [[ $ItemSize == 0 ]]
  then
    if [[ $DoDryRun == 1 ]]
    then
      echo "Would have created empty file $ItemPath"
    else
      touch "$ItemPath"
      if [[ $? != 0 ]]
      then
        echo "Failed to empty file $ItemPath" >> /tmp/kiocopy/$DateStamp/logs/self.log
      fi
    fi
  else
    if [[ $DoDryRun == 1 ]]
    then
      echo "Would have created $ItemSize byte file $ItemPath"
    else
      fallocate -l $ItemSize "$ItemPath"
      if [[ $? != 0 ]]
      then
        echo "Failed to $ItemSize byte file $ItemPath" >> /tmp/kiocopy/$DateStamp/logs/self.log
      fi
    fi
  fi
done < <(tail -n +2 "$SeedFile")





#The actual test for trying to copy the folders, along with post logging.
echo "Running the test..."
export QT_LOGGING_RULES=kf5.kio.*=true
kioclient5 copy /tmp/kiocopy/$DateStamp/folder_src/testdir /tmp/kiocopy/$DateStamp/folder_dest &> /tmp/kiocopy/$DateStamp/logs/kioclient.log
echo "$?" >> /tmp/kiocopy/$DateStamp/report.log
#diff -rq /tmp/kiocopy/$DateStamp/folder_src/testdir /tmp/kiocopy/$DateStamp/folder_dest/testdir > /tmp/kiocopy/$DateStamp/logs/folderdiff.txt
tree -a /tmp/kiocopy/$DateStamp/folder_src/testdir  > /tmp/kiocopy/$DateStamp/logs/src_tree.txt
tree -a /tmp/kiocopy/$DateStamp/folder_dest/testdir > /tmp/kiocopy/$DateStamp/logs/dest_tree.txt


sudo umount /tmp/kiocopy/$DateStamp/fsimg_src
sudo umount /tmp/kiocopy/$DateStamp/fsimg_dest

rm /tmp/kiocopy/$DateStamp/fsimg_src
rm /tmp/kiocopy/$DateStamp/fsimg_dest

echo "Job Done, see:
Log of kioclient: /tmp/kiocopy/$DateStamp/logs/kioclient.log
Tree of the source: /tmp/kiocopy/$DateStamp/logs/src_tree.txt
Tree of the target:
Seed File: /tmp/kiocopy/$DateStamp/Seed.txt

"

echo "Will now start kompare. Press enter."
echo read a
kompare /tmp/kiocopy/$DateStamp/logs/src_tree.txt /tmp/kiocopy/$DateStamp/logs/dest_tree.txt &> /dev/null &
